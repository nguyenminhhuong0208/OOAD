{"ast":null,"code":"import { makePromise } from './utils.js';\nimport request from './request.js';\nconst getDefaults = () => {\n  return {\n    loadPath: '/locales/{{lng}}/{{ns}}.json',\n    addPath: '/locales/add/{{lng}}/{{ns}}',\n    parse: data => JSON.parse(data),\n    stringify: JSON.stringify,\n    parsePayload: (namespace, key, fallbackValue) => ({\n      [key]: fallbackValue || ''\n    }),\n    parseLoadPayload: (languages, namespaces) => undefined,\n    request,\n    reloadInterval: typeof window !== 'undefined' ? false : 60 * 60 * 1000,\n    customHeaders: {},\n    queryStringParams: {},\n    crossDomain: false,\n    // used for XmlHttpRequest\n    withCredentials: false,\n    // used for XmlHttpRequest\n    overrideMimeType: false,\n    // used for XmlHttpRequest\n    requestOptions: {\n      // used for fetch\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'default'\n    }\n  };\n};\nclass Backend {\n  constructor(services, options = {}, allOptions = {}) {\n    this.services = services;\n    this.options = options;\n    this.allOptions = allOptions;\n    this.type = 'backend';\n    this.init(services, options, allOptions);\n  }\n  init(services, options = {}, allOptions = {}) {\n    this.services = services;\n    this.options = {\n      ...getDefaults(),\n      ...(this.options || {}),\n      ...options\n    };\n    this.allOptions = allOptions;\n    if (this.services && this.options.reloadInterval) {\n      setInterval(() => this.reload(), this.options.reloadInterval);\n    }\n  }\n  readMulti(languages, namespaces, callback) {\n    this._readAny(languages, languages, namespaces, namespaces, callback);\n  }\n  read(language, namespace, callback) {\n    this._readAny([language], language, [namespace], namespace, callback);\n  }\n  _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {\n    let loadPath = this.options.loadPath;\n    if (typeof this.options.loadPath === 'function') {\n      loadPath = this.options.loadPath(languages, namespaces);\n    }\n    loadPath = makePromise(loadPath);\n    loadPath.then(resolvedLoadPath => {\n      if (!resolvedLoadPath) return callback(null, {});\n      const url = this.services.interpolator.interpolate(resolvedLoadPath, {\n        lng: languages.join('+'),\n        ns: namespaces.join('+')\n      });\n      this.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);\n    });\n  }\n  loadUrl(url, callback, languages, namespaces) {\n    const lng = typeof languages === 'string' ? [languages] : languages;\n    const ns = typeof namespaces === 'string' ? [namespaces] : namespaces;\n    // parseLoadPayload â€” default undefined\n    const payload = this.options.parseLoadPayload(lng, ns);\n    this.options.request(this.options, url, payload, (err, res) => {\n      if (res && (res.status >= 500 && res.status < 600 || !res.status)) return callback('failed loading ' + url + '; status code: ' + res.status, true /* retry */);\n      if (res && res.status >= 400 && res.status < 500) return callback('failed loading ' + url + '; status code: ' + res.status, false /* no retry */);\n      if (!res && err && err.message && err.message.indexOf('Failed to fetch') > -1) return callback('failed loading ' + url + ': ' + err.message, true /* retry */);\n      if (err) return callback(err, false);\n      let ret, parseErr;\n      try {\n        if (typeof res.data === 'string') {\n          ret = this.options.parse(res.data, languages, namespaces);\n        } else {\n          // fallback, which omits calling the parse function\n          ret = res.data;\n        }\n      } catch (e) {\n        parseErr = 'failed parsing ' + url + ' to json';\n      }\n      if (parseErr) return callback(parseErr, false);\n      callback(null, ret);\n    });\n  }\n  create(languages, namespace, key, fallbackValue, callback) {\n    // If there is a falsey addPath, then abort -- this has been disabled.\n    if (!this.options.addPath) return;\n    if (typeof languages === 'string') languages = [languages];\n    const payload = this.options.parsePayload(namespace, key, fallbackValue);\n    let finished = 0;\n    const dataArray = [];\n    const resArray = [];\n    languages.forEach(lng => {\n      let addPath = this.options.addPath;\n      if (typeof this.options.addPath === 'function') {\n        addPath = this.options.addPath(lng, namespace);\n      }\n      const url = this.services.interpolator.interpolate(addPath, {\n        lng,\n        ns: namespace\n      });\n      this.options.request(this.options, url, payload, (data, res) => {\n        // TODO: if res.status === 4xx do log\n        finished += 1;\n        dataArray.push(data);\n        resArray.push(res);\n        if (finished === languages.length) {\n          if (typeof callback === 'function') callback(dataArray, resArray);\n        }\n      });\n    });\n  }\n  reload() {\n    const {\n      backendConnector,\n      languageUtils,\n      logger\n    } = this.services;\n    const currentLanguage = backendConnector.language;\n    if (currentLanguage && currentLanguage.toLowerCase() === 'cimode') return; // avoid loading resources for cimode\n\n    const toLoad = [];\n    const append = lng => {\n      const lngs = languageUtils.toResolveHierarchy(lng);\n      lngs.forEach(l => {\n        if (toLoad.indexOf(l) < 0) toLoad.push(l);\n      });\n    };\n    append(currentLanguage);\n    if (this.allOptions.preload) this.allOptions.preload.forEach(l => append(l));\n    toLoad.forEach(lng => {\n      this.allOptions.ns.forEach(ns => {\n        backendConnector.read(lng, ns, 'read', null, null, (err, data) => {\n          if (err) logger.warn(`loading namespace ${ns} for language ${lng} failed`, err);\n          if (!err && data) logger.log(`loaded namespace ${ns} for language ${lng}`, data);\n          backendConnector.loaded(`${lng}|${ns}`, err, data);\n        });\n      });\n    });\n  }\n}\nBackend.type = 'backend';\nexport default Backend;","map":{"version":3,"names":["makePromise","request","getDefaults","loadPath","addPath","parse","data","JSON","stringify","parsePayload","namespace","key","fallbackValue","parseLoadPayload","languages","namespaces","undefined","reloadInterval","window","customHeaders","queryStringParams","crossDomain","withCredentials","overrideMimeType","requestOptions","mode","credentials","cache","Backend","constructor","services","options","allOptions","type","init","setInterval","reload","readMulti","callback","_readAny","read","language","loadUrlLanguages","loadUrlNamespaces","then","resolvedLoadPath","url","interpolator","interpolate","lng","join","ns","loadUrl","payload","err","res","status","message","indexOf","ret","parseErr","e","create","finished","dataArray","resArray","forEach","push","length","backendConnector","languageUtils","logger","currentLanguage","toLowerCase","toLoad","append","lngs","toResolveHierarchy","l","preload","warn","log","loaded"],"sources":["D:/Documents/GitHub/OOAD - Copy/fontend/node_modules/i18next-http-backend/lib/index.js"],"sourcesContent":["import { makePromise } from './utils.js'\nimport request from './request.js'\n\nconst getDefaults = () => {\n  return {\n    loadPath: '/locales/{{lng}}/{{ns}}.json',\n    addPath: '/locales/add/{{lng}}/{{ns}}',\n    parse: data => JSON.parse(data),\n    stringify: JSON.stringify,\n    parsePayload: (namespace, key, fallbackValue) => ({ [key]: fallbackValue || '' }),\n    parseLoadPayload: (languages, namespaces) => undefined,\n    request,\n    reloadInterval: typeof window !== 'undefined' ? false : 60 * 60 * 1000,\n    customHeaders: {},\n    queryStringParams: {},\n    crossDomain: false, // used for XmlHttpRequest\n    withCredentials: false, // used for XmlHttpRequest\n    overrideMimeType: false, // used for XmlHttpRequest\n    requestOptions: { // used for fetch\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'default'\n    }\n  }\n}\n\nclass Backend {\n  constructor (services, options = {}, allOptions = {}) {\n    this.services = services\n    this.options = options\n    this.allOptions = allOptions\n    this.type = 'backend'\n    this.init(services, options, allOptions)\n  }\n\n  init (services, options = {}, allOptions = {}) {\n    this.services = services\n    this.options = { ...getDefaults(), ...(this.options || {}), ...options }\n    this.allOptions = allOptions\n    if (this.services && this.options.reloadInterval) {\n      setInterval(() => this.reload(), this.options.reloadInterval)\n    }\n  }\n\n  readMulti (languages, namespaces, callback) {\n    this._readAny(languages, languages, namespaces, namespaces, callback)\n  }\n\n  read (language, namespace, callback) {\n    this._readAny([language], language, [namespace], namespace, callback)\n  }\n\n  _readAny (languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {\n    let loadPath = this.options.loadPath\n    if (typeof this.options.loadPath === 'function') {\n      loadPath = this.options.loadPath(languages, namespaces)\n    }\n\n    loadPath = makePromise(loadPath)\n\n    loadPath.then(resolvedLoadPath => {\n      if (!resolvedLoadPath) return callback(null, {})\n      const url = this.services.interpolator.interpolate(resolvedLoadPath, { lng: languages.join('+'), ns: namespaces.join('+') })\n      this.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces)\n    })\n  }\n\n  loadUrl (url, callback, languages, namespaces) {\n    const lng = (typeof languages === 'string') ? [languages] : languages\n    const ns = (typeof namespaces === 'string') ? [namespaces] : namespaces\n    // parseLoadPayload â€” default undefined\n    const payload = this.options.parseLoadPayload(lng, ns)\n    this.options.request(this.options, url, payload, (err, res) => {\n      if (res && ((res.status >= 500 && res.status < 600) || !res.status)) return callback('failed loading ' + url + '; status code: ' + res.status, true /* retry */)\n      if (res && res.status >= 400 && res.status < 500) return callback('failed loading ' + url + '; status code: ' + res.status, false /* no retry */)\n      if (!res && err && err.message && err.message.indexOf('Failed to fetch') > -1) return callback('failed loading ' + url + ': ' + err.message, true /* retry */)\n      if (err) return callback(err, false)\n\n      let ret, parseErr\n      try {\n        if (typeof res.data === 'string') {\n          ret = this.options.parse(res.data, languages, namespaces)\n        } else { // fallback, which omits calling the parse function\n          ret = res.data\n        }\n      } catch (e) {\n        parseErr = 'failed parsing ' + url + ' to json'\n      }\n      if (parseErr) return callback(parseErr, false)\n      callback(null, ret)\n    })\n  }\n\n  create (languages, namespace, key, fallbackValue, callback) {\n    // If there is a falsey addPath, then abort -- this has been disabled.\n    if (!this.options.addPath) return\n    if (typeof languages === 'string') languages = [languages]\n    const payload = this.options.parsePayload(namespace, key, fallbackValue)\n    let finished = 0\n    const dataArray = []\n    const resArray = []\n    languages.forEach(lng => {\n      let addPath = this.options.addPath\n      if (typeof this.options.addPath === 'function') {\n        addPath = this.options.addPath(lng, namespace)\n      }\n      const url = this.services.interpolator.interpolate(addPath, { lng, ns: namespace })\n\n      this.options.request(this.options, url, payload, (data, res) => {\n        // TODO: if res.status === 4xx do log\n        finished += 1\n        dataArray.push(data)\n        resArray.push(res)\n        if (finished === languages.length) {\n          if (typeof callback === 'function') callback(dataArray, resArray)\n        }\n      })\n    })\n  }\n\n  reload () {\n    const { backendConnector, languageUtils, logger } = this.services\n    const currentLanguage = backendConnector.language\n    if (currentLanguage && currentLanguage.toLowerCase() === 'cimode') return // avoid loading resources for cimode\n\n    const toLoad = []\n    const append = (lng) => {\n      const lngs = languageUtils.toResolveHierarchy(lng)\n      lngs.forEach(l => {\n        if (toLoad.indexOf(l) < 0) toLoad.push(l)\n      })\n    }\n\n    append(currentLanguage)\n\n    if (this.allOptions.preload) this.allOptions.preload.forEach((l) => append(l))\n\n    toLoad.forEach(lng => {\n      this.allOptions.ns.forEach(ns => {\n        backendConnector.read(lng, ns, 'read', null, null, (err, data) => {\n          if (err) logger.warn(`loading namespace ${ns} for language ${lng} failed`, err)\n          if (!err && data) logger.log(`loaded namespace ${ns} for language ${lng}`, data)\n\n          backendConnector.loaded(`${lng}|${ns}`, err, data)\n        })\n      })\n    })\n  }\n}\n\nBackend.type = 'backend'\n\nexport default Backend\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}